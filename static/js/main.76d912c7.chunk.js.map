{"version":3,"sources":["ui-kit/Button/index.tsx","Components/ChangeLanguageButton/index.tsx","ui-kit/Layout/index.tsx","ui-kit/MainLayout/index.tsx","Components/GroupPopupContent/PopupContentGetGift/index.tsx","ui-kit/Progress/index.tsx","ui-kit/AchievementItem/index.tsx","ui-kit/AchievementList/index.tsx","ui-kit/Popup/index.tsx","store/Achievements/index.ts","store/Achievements/store.ts","Pages/AchievementPage/index.tsx","App.tsx","reportWebVitals.ts","i18n.ts","index.tsx"],"names":["dictionaryBackgroundColor","default","green","text","dictionaryColor","Button","styled","div","type","getBackgroundColor","getColor","React","memo","dictionaryLanguages","key","title","StyledChangeLanguageButton","ChangeLanguageButton","i18n","useTranslation","map","onClick","changeLanguage","Layout","MainLayout","process","PopupImage","img","StyledPopupContentGetGift","PopupGiftType","PopupGiftTitle","PopupGiftDescription","PopupContentGetGift","closePopup","onGetGift","gift","t","src","description","Trans","StyledProgress","isCursorPointer","ProgressHighlight","current","max","Math","floor","ProgressText","Progress","StyledAchievementItem","AchivementInfo","AchivementInfoTitle","AchivementInfoDescription","AchivementStatus","isDone","doneText","AchievementItem","info","awardReceiveText","isAwardReceived","onAwardReceive","undefined","AchievementItemI18n","props","i18nKey","AchievementList","StyledPopup","PopupBackground","PopupContainer","Popup","content","isVisible","onClose","handleClose","useCallback","data-background","data-container","store","itemList","makeAutoObservable","this","item","id","findedItem","find","list","AchievementStore","setItemlist","observer","useState","itemId","popupState","setPopupState","useEffect","intervalId","setInterval","updateStatus","clearInterval","handleOpenPopup","handleClosePopup","markItemPrizeGetted","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","use","Fetch","initReactI18next","init","backend","loadPath","debug","fallbackLng","preload","ns","supportedLngs","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.76d912c7.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype ButtonType = \"green\" | \"text\";\n\ninterface ButtonProps {\n  type?: ButtonType;\n}\n\nconst dictionaryBackgroundColor = {\n  default: \"transparent\",\n  green: \"#6ad389\",\n  text: \"transparent\",\n};\n\nfunction getBackgroundColor(type: ButtonType | undefined) {\n  return dictionaryBackgroundColor[type || \"default\"];\n}\n\nconst dictionaryColor = {\n  default: \"#846e99\",\n  green: \"#1f1d3a\",\n  text: \"#846e99\",\n};\n\nfunction getColor(type: ButtonType | undefined) {\n  return dictionaryColor[type || \"default\"];\n}\n\nconst Button = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 20px;\n  border-radius: 6px;\n  background-color: ${({ type }: ButtonProps) => getBackgroundColor(type)};\n  color: ${({ type }: ButtonProps) => getColor(type)};\n`;\n\nexport default React.memo(Button);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport Button from \"../../ui-kit/Button\";\n\nconst dictionaryLanguages = [\n  {\n    key: \"en\",\n    title: \"English\",\n  },\n  {\n    key: \"ru\",\n    title: \"Русский\",\n  },\n];\n\nconst StyledChangeLanguageButton = styled.div`\n  display: flex;\n`;\nfunction ChangeLanguageButton() {\n  const { i18n } = useTranslation();\n\n  return (\n    <StyledChangeLanguageButton>\n      {dictionaryLanguages.map(({ key, title }) => (\n        <Button onClick={() => i18n.changeLanguage(key)} key={key}>\n          {title}\n        </Button>\n      ))}\n    </StyledChangeLanguageButton>\n  );\n}\n\nexport default ChangeLanguageButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Layout = styled.div`\n  padding: 10px;\n`;\nexport default Layout;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst MainLayout = styled.div`\n  min-height: 100vh;\n  max-height: 100%;\n  width: 100vw;\n  background-color: rgb(38, 1, 67);\n  background-image: ${`url('${process.env.PUBLIC_URL}/static/bg.svg')`};\n  background-position: 100% 0px;\n  background-repeat: no-repeat;\n  background-size: contain;\n`;\nexport default MainLayout;\n","import React from \"react\";\nimport Button from \"../../../ui-kit/Button\";\nimport { ContentArgs } from \"../../../ui-kit/Popup\";\nimport styled from \"styled-components\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\nconst PopupImage = styled.img`\n  width: 200px;\n  height: 200px;\n  border-radius: 100px;\n  margin-bottom: 40px;\n`;\n\nconst StyledPopupContentGetGift = styled.div`\n  background-color: #2e2151;\n  padding: 40px;\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst PopupGiftType = styled.div`\n  margin-bottom: 20px;\n  color: #8d779f;\n  text-transform: uppercase;\n`;\n\nconst PopupGiftTitle = styled.div`\n  margin-bottom: 40px;\n  color: #ffffff;\n  font-size: 25px;\n  font-weight: bold;\n`;\n\nconst PopupGiftDescription = styled.div`\n  margin-bottom: 50px;\n  color: #d3ccd9;\n`;\n\ninterface PopupContentGiftInfo {\n  img?: string;\n  title?: string;\n  type?: string;\n  description?: string;\n}\n\ninterface PopupContentGetGiftProps extends ContentArgs {\n  onGetGift: () => void;\n  gift: PopupContentGiftInfo;\n}\n\nfunction PopupContentGetGift({\n  closePopup,\n  onGetGift,\n  gift,\n}: PopupContentGetGiftProps) {\n  const { t } = useTranslation();\n  return (\n    <StyledPopupContentGetGift>\n      {gift.img && <PopupImage src={gift.img} />}\n\n      {gift.type && <PopupGiftType>{gift.type}</PopupGiftType>}\n\n      {gift.title && <PopupGiftTitle>{gift.title}</PopupGiftTitle>}\n\n      {gift.description && (\n        <PopupGiftDescription>{gift.description}</PopupGiftDescription>\n      )}\n\n      <Button\n        type=\"green\"\n        onClick={() => {\n          onGetGift();\n          closePopup();\n        }}\n      >\n        <Trans t={t}>Participate</Trans>\n      </Button>\n      <Button onClick={closePopup}>\n        <Trans t={t}>Later</Trans>\n      </Button>\n    </StyledPopupContentGetGift>\n  );\n}\n\nexport default PopupContentGetGift;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface ProgressProps {\n  current: number;\n  max: number;\n  onClick?: () => void;\n  text?: string;\n}\n\ninterface StyledProgressProps {\n  isCursorPointer: boolean;\n}\nconst StyledProgress = styled.div`\n  width: 100%;\n  height: 50px;\n  border-radius: 4px;\n  padding: 6px;\n  background-color: #422a62;\n  box-sizing: border-box;\n  position: relative;\n  cursor: ${({ isCursorPointer }: StyledProgressProps) =>\n    isCursorPointer ? \"pointer\" : \"auto\"};\n`;\n\nconst ProgressHighlight = styled.div`\n  height: 100%;\n  width: ${({ current, max }: ProgressProps) =>\n    Math.floor((current * 100) / max)}%;\n  background-color: ${({ current, max }: ProgressProps) =>\n    current === max ? \"#18d288\" : \"#6f6bee\"};\n`;\n\nconst ProgressText = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #241d4b;\n  font-weight: bold;\n  pointer-events: none;\n`;\n\nexport default function Progress({\n  text,\n  current,\n  max,\n  onClick,\n}: ProgressProps) {\n  return (\n    <StyledProgress isCursorPointer={!!onClick}>\n      <ProgressHighlight\n        current={current}\n        max={max}\n        onClick={() => onClick && onClick()}\n      ></ProgressHighlight>\n      {text && <ProgressText>{text}</ProgressText>}\n    </StyledProgress>\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport Progress from \"../Progress\";\n\nconst StyledAchievementItem = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n`;\n\ninterface AchivementInfo {\n  title: string;\n  description: string;\n}\ninterface AchievementItemProps {\n  current: number;\n  max: number;\n  info?: AchivementInfo;\n  doneText: string;\n\n  isAwardReceived: boolean;\n  onAwardReceive?: () => void;\n  awardReceiveText: string;\n}\n\nconst AchivementInfo = styled.div`\n  min-width: 500px;\n  max-width: 500px;\n  margin-right: 20px;\n`;\nconst AchivementInfoTitle = styled.div`\n  margin-bottom: 10px;\n  color: #e5e1ea;\n  font-weight: bold;\n`;\nconst AchivementInfoDescription = styled.div`\n  color: #78618b;\n`;\n\ninterface AchivementStatusProps {\n  current: number;\n  max: number;\n  isDone: boolean;\n  doneText: string;\n}\nconst AchivementStatus = styled.div`\n  margin-left: 20px;\n  min-width: 100px;\n  color: #d6cedd;\n  font-weight: ${({ isDone }: AchivementStatusProps) =>\n    isDone ? \"bold\" : \"normal\"};\n  &::before {\n    content: \"${({ isDone, doneText, current, max }: AchivementStatusProps) =>\n      isDone ? doneText : `${current} / ${max}`}\";\n  }\n`;\nfunction AchievementItem({\n  current,\n  max,\n  doneText,\n  info,\n  awardReceiveText,\n  isAwardReceived,\n  onAwardReceive,\n}: AchievementItemProps) {\n  return (\n    <StyledAchievementItem>\n      {info && (\n        <AchivementInfo>\n          <AchivementInfoTitle>{info.title}</AchivementInfoTitle>\n          <AchivementInfoDescription>\n            {info.description}\n          </AchivementInfoDescription>\n        </AchivementInfo>\n      )}\n\n      <Progress\n        text={\n          !isAwardReceived && current === max ? awardReceiveText : undefined\n        }\n        current={current}\n        max={max}\n        onClick={\n          !isAwardReceived && current === max\n            ? () => onAwardReceive && onAwardReceive()\n            : undefined\n        }\n      />\n      <AchivementStatus\n        doneText={doneText}\n        current={current}\n        max={max}\n        isDone={current === max}\n      />\n    </StyledAchievementItem>\n  );\n}\n\ninterface AchievementItemI18nProps extends AchievementItemProps {\n  i18nKey: string;\n}\n\nexport function AchievementItemI18n(props: AchievementItemI18nProps) {\n  const { t } = useTranslation(\"achievements\");\n\n  return (\n    <AchievementItem\n      {...props}\n      info={{\n        title: t(`${props.i18nKey}.title`),\n        description: t(`${props.i18nKey}.title`),\n      }}\n    />\n  );\n}\n\nexport default React.memo(AchievementItem);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst AchievementList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport default AchievementList;\n","import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\n\nexport interface ContentArgs {\n  closePopup: () => void;\n}\nexport interface PopupProps {\n  isVisible?: boolean;\n  content?: (arg0: ContentArgs) => React.ReactNode;\n  onClose?: () => void;\n}\n\nconst StyledPopup = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst PopupBackground = styled.div`\n  z-index: 9999;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  backdrop-filter: blur(5px);\n`;\n\nconst PopupContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n\nexport default function Popup({ content, isVisible, onClose }: PopupProps) {\n  const handleClose = useCallback(() => onClose && onClose(), [onClose]);\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <PopupBackground data-background=\"\">\n      <PopupContainer onClick={handleClose} data-container=\"\">\n        <StyledPopup>\n          {content ? content({ closePopup: handleClose }) : null}\n        </StyledPopup>\n      </PopupContainer>\n    </PopupBackground>\n  );\n}\n","import Store from \"./store\";\n\nexport const store = new Store();\n\nexport default store;\n","import { makeAutoObservable } from \"mobx\";\n\ninterface AchievementItem {\n  id: number;\n  i18nKey: string;\n  current: number;\n  max: number;\n  isAwardReceived: boolean;\n}\nexport default class Achievement {\n  private itemList: AchievementItem[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  updateStatus() {\n    this.itemList.map((item) => {\n      if (item.current !== item.max) {\n        item.current += 1;\n      }\n    });\n  }\n\n  get list() {\n    return this.itemList;\n  }\n\n  markItemPrizeGetted(id: number) {\n    const findedItem = this.itemList.find((item) => item.id === id);\n    if (!findedItem) {\n      return;\n    }\n\n    findedItem.isAwardReceived = true;\n  }\n\n  setItemlist(list: AchievementItem[]) {\n    this.itemList = list;\n  }\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport PopupContentGetGift from \"../../Components/GroupPopupContent/PopupContentGetGift\";\nimport { AchievementItemI18n } from \"../../ui-kit/AchievementItem\";\nimport AchievementList from \"../../ui-kit/AchievementList\";\nimport Layout from \"../../ui-kit/Layout\";\nimport Popup from \"../../ui-kit/Popup\";\nimport AchievementStore from \"../../store/Achievements\";\nimport { observer } from \"mobx-react\";\n\nAchievementStore.setItemlist([\n  { id: 1, i18nKey: \"1\", isAwardReceived: false, current: 5, max: 5 },\n  { id: 2, i18nKey: \"2\", isAwardReceived: false, current: 0, max: 10 },\n  { id: 3, i18nKey: \"3\", isAwardReceived: false, current: 0, max: 100 },\n  { id: 4, i18nKey: \"4\", isAwardReceived: false, current: 500, max: 1000 },\n  { id: 5, i18nKey: \"5\", isAwardReceived: false, current: 0, max: 10 },\n]);\n\nfunction AchievementPage() {\n  const [popupState, setPopupState] = useState({\n    isVisible: false,\n    i18nKey: \"\",\n    itemId: 0,\n  });\n  const { t } = useTranslation([\"pages\", \"achievements\"]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      AchievementStore.updateStatus();\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const handleOpenPopup = useCallback((itemId: number, i18nKey: string) => {\n    setPopupState({ isVisible: true, itemId, i18nKey });\n  }, []);\n\n  const handleClosePopup = useCallback(() => {\n    setPopupState({ isVisible: false, itemId: 0, i18nKey: \"\" });\n  }, []);\n\n  return (\n    <Layout>\n      <Popup\n        onClose={handleClosePopup}\n        isVisible={popupState.isVisible}\n        content={(props) => (\n          <PopupContentGetGift\n            gift={{\n              img: `${process.env.PUBLIC_URL}/static/skill.png`,\n              title: t(`achievements:${popupState.i18nKey}.popup.title`),\n              type: t(`achievements:${popupState.i18nKey}.popup.type`),\n              description: t(\n                `achievements:${popupState.i18nKey}.popup.description`\n              ),\n            }}\n            onGetGift={() =>\n              AchievementStore.markItemPrizeGetted(popupState.itemId)\n            }\n            {...props}\n          />\n        )}\n      />\n      <AchievementList>\n        {AchievementStore.list.map(\n          ({ isAwardReceived, current, max, i18nKey, id }) => (\n            <AchievementItemI18n\n              onAwardReceive={() => handleOpenPopup(id, i18nKey)}\n              key={id}\n              awardReceiveText={t(\"pages:achievements.checkPrizes\")}\n              isAwardReceived={isAwardReceived}\n              current={current}\n              max={max}\n              doneText={t(\"pages:achievements.doneText\")}\n              i18nKey={i18nKey}\n            />\n          )\n        )}\n      </AchievementList>\n    </Layout>\n  );\n}\n\nexport default observer(AchievementPage);\n","import React from \"react\";\nimport ChangeLanguageButton from \"./Components/ChangeLanguageButton\";\nimport Layout from \"./ui-kit/Layout\";\nimport MainLayout from \"./ui-kit/MainLayout\";\nimport AchievementPage from \"./Pages/AchievementPage\";\n\nfunction App() {\n  return (\n    <MainLayout>\n      <Layout>\n        <ChangeLanguageButton />\n\n        <AchievementPage />\n      </Layout>\n    </MainLayout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Fetch from \"i18next-fetch-backend\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n.use(Fetch).use(initReactI18next); // passes i18n down to react-i18next\ni18n.init({\n  backend: {\n    loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`,\n  },\n\n  debug: true,\n  fallbackLng: [\"en\"],\n  preload: [\"en\"],\n  ns: [\"translation\", \"pages\", \"achievements\"],\n  supportedLngs: [\"en\", \"ru\"],\n\n  keySeparator: \".\", // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n});\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback=\"en\">\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}